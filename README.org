#+BABEL: :session *clojure-nrepl* :cache yes :results value
#+PROPERTY: noweb: yes

* org.msync/lucene-clj [[http://travis-ci.org/jaju/lucene-clj][file:https://secure.travis-ci.org/jaju/lucene-clj.png]]

A Clojure wrapper for Apache Lucene.
The primary use-case is for in-process text search needs for *read-only* datasets that can be managed on single-instance deployments. Because for multi-instance deployments, keeping modifications of data in sync will be hard. In other words, when you need light-weight text-search support without the hassle of setting up something like Solr.

Both in-memory, and on-disk indexes can be used depending on the dataset size.

Note: *UNSTABLE* API. No releases yet, but coming soon.

** Dependency
#+BEGIN_SRC clojure
    [org.msync/lucene-clj "0.2.0-SNAPSHOT"]
#+END_SRC
Available via [[https://clojars.org/search?q=lucene-clj][clojars]].


** What?

Inspired by other example wrappers I've come across.
Notably
 - [[https://github.com/federkasten/clucie][Clucie]]
 - [[https://github.com/weavejester/clucy][Clucy]]


** Why?

This is imagined as a light-weight library for cheaply creating search indexes for simple scenarios. Any updates to the index are suggested to be done via create-a-new-index-and-switch approach. The objectives are loosely as follows.

- Stick to _core_ Lucene. No script/language specific dependencies part of the core language, but can be added by users per need.
- Support for _suggestions_ - a feature of Lucene I found quite undocumented, as well as lacking good examples for.
- Up-to-date with the latest Lucene as on date.

I am thankful to the above library authors for their liberal licensing. I've used their ideas/code liberally in places.


** Usage

Note: There's sample data in the repository that we use. A hand-created list is [[file:test-resources/sample-data.csv][here]] and one from Kaggle is [[file:test-resources/albumlist.csv][here]]. These are also used in the tests.

_Given_
#+BEGIN_SRC clojure :tangle test/msync/lucene/tests_common.clj :results none
  (ns msync.lucene.tests-common
    (:require [msync.lucene
               [analyzers :as analyzers]]
              [msync.lucene.utils :as utils]
              [clojure.data.csv :as csv]
              [clojure.java.io :as io]))

  (defonce sample-data (-> "sample-data.csv"
                           io/resource
                           slurp
                           csv/read-csv
                           utils/docs:vecs->maps))

  (defonce album-data (-> "albumlist.csv"
                          io/resource
                          slurp
                          csv/read-csv
                          utils/docs:vecs->maps))

  (defonce default-analyzer (analyzers/standard-analyzer))
  (defonce keyword-analyzer (analyzers/keyword-analyzer))

  ;; A per-field analyzer, which composes other kinds of analyzers
  (defonce album-data-analyzer
    (analyzers/per-field-analyzer default-analyzer
                                  {:Year     keyword-analyzer
                                   :Genre    keyword-analyzer
                                   :Subgenre keyword-analyzer}))
#+END_SRC


***  Some simple REPL-runs

**** Preamble
#+BEGIN_SRC clojure :tangle dev/dev.clj :results none
  (ns dev
    (:require [msync.lucene :as lucene]
              [msync.lucene
               [store :as store]
               [document :as ld]
               [tests-common :refer :all]]))
#+END_SRC

**** COMMENT Switch namespace
#+BEGIN_SRC clojure
(in-ns 'dev)
#+END_SRC

#+RESULTS:
: nil

**** Create an index
In memory
#+BEGIN_SRC clojure :tangle dev/dev.clj :results none
  (def index (store/store :memory :analyzer album-data-analyzer))
#+END_SRC

Or, on disk
#+BEGIN_SRC clojure :tangle no :results none
  (def index (store/store "/path/to/index/directory" :analyzer album-data-analyzer))
#+END_SRC

Sample album data for reference
#+BEGIN_SRC clojure :tangle no :results output code :exports both
(take 3 album-data)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
({:Number "1",
  :Year "1967",
  :Album "Sgt. Pepper's Lonely Hearts Club Band",
  :Artist "The Beatles",
  :Genre "Rock",
  :Subgenre "Rock & Roll, Psychedelic Rock"}
 {:Number "2",
  :Year "1966",
  :Album "Pet Sounds",
  :Artist "The Beach Boys",
  :Genre "Rock",
  :Subgenre "Pop Rock, Psychedelic Rock"}
 {:Number "3",
  :Year "1966",
  :Album "Revolver",
  :Artist "The Beatles",
  :Genre "Rock",
  :Subgenre "Psychedelic Rock, Pop Rock"})
#+END_SRC


**** Index documents - which are Clojure maps
Documents are Clojure maps. The options passed to the `index!` function control behavior in various ways
- /:context-fn/ - Lucene allows for a list of contexts to associate with the /suggest/ fields, which allow us to filter on them while querying for suggestions.
- /:suggest-fields/ - Fields that are treated specially during indexing, allowing Lucene to create internal structures for quick prefix matching.
- /:stored-fields/ - Lucene can index for efficient searching, but to save space, it need not store all the field values. If you want Lucene to also store the contents, pass them as a collection to this argument.

#+BEGIN_SRC clojure :tangle dev/dev.clj :results none
  (lucene/index! index album-data
                 {:context-fn     #(map clojure.string/trim (clojure.string/split (:Genre %) #","))
                  :suggest-fields [:Album :Artist]
                  :stored-fields  [:Number :Year :Album :Artist :Genre :Subgenre]})
#+END_SRC


**** Now, we can search
#+BEGIN_SRC clojure :results output code :tangle dev/dev.clj :exports both
  (lucene/search index 
                 {:Year "1968"} ;; Map of field-values to search with
                 {:results-per-page 5 ;; Control the number of results returned
                  :hit->doc         #(-> %
                                         ld/document->map
                                         (select-keys [:Year :Album]))})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit {:Year "1968", :Album "The Beatles (\"The White Album\")"},
  :score 1.4311604,
  :doc-id 9}
 {:hit {:Year "1968", :Album "Astral Weeks"},
  :score 1.4311604,
  :doc-id 18}
 {:hit {:Year "1968", :Album "Music From Big Pink"},
  :score 1.4311604,
  :doc-id 33}
 {:hit {:Year "1968", :Album "Electric Ladyland"},
  :score 1.4311604,
  :doc-id 54}
 {:hit {:Year "1968", :Album "Beggars Banquet"},
  :score 1.4311604,
  :doc-id 57}]
#+END_SRC

**** We can ask for suggestions on the fields indexed to support it
From before, notice that the fields `Album` and `Artist` have been marked to be indexed in a way so that we can ask for prefix-based suggestions.

#+BEGIN_SRC clojure :results output code :tangle dev/dev.clj :exports both
(lucene/suggest index :Album "par" {:hit->doc ld/document->map :fuzzy? false :contexts ["Electronic"]})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit
  {:Number "140",
   :Year "1978",
   :Album "Parallel Lines",
   :Artist "Blondie",
   :Genre "Electronic, Rock",
   :Subgenre "New Wave, Pop Rock, Punk, Disco"},
  :score 1.0,
  :doc-id 139}]
#+END_SRC

We can ask for fuzzy matching when querying for suggestions.
#+BEGIN_SRC clojure :results output code :tangle dev/dev.clj :exports both
(lucene/suggest index :Album "per" {:hit->doc ld/document->map :fuzzy? true :contexts ["Electronic"]})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit
  {:Number "140",
   :Year "1978",
   :Album "Parallel Lines",
   :Artist "Blondie",
   :Genre "Electronic, Rock",
   :Subgenre "New Wave, Pop Rock, Punk, Disco"},
  :score 2.0,
  :doc-id 139}
 {:hit
  {:Number "76",
   :Year "1984",
   :Album "Purple Rain",
   :Artist "Prince and the Revolution",
   :Genre "Electronic, Rock, Funk / Soul, Stage & Screen",
   :Subgenre "Pop Rock, Funk, Soundtrack, Synth-pop"},
  :score 2.0,
  :doc-id 75}]
#+END_SRC

**** Or, do a fuzzy search
#+BEGIN_SRC clojure :results output code m:tangle dev/dev.clj :exports both
  (lucene/search index {:Album "forever"} {:hit->doc ld/document->map :fuzzy? true})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit
  {:Number "40",
   :Year "1967",
   :Album "Forever Changes",
   :Artist "Love",
   :Genre "Rock",
   :Subgenre "Folk Rock, Psychedelic Rock"},
  :score 3.0850306,
  :doc-id 39}
 {:hit
  {:Number "132",
   :Year "1977",
   :Album "Saturday Night Fever: The Original Movie Sound Track",
   :Artist "Various Artists",
   :Genre "Electronic,�Stage & Screen",
   :Subgenre "Soundtrack,�Disco"},
  :score 0.95929563,
  :doc-id 131}]
#+END_SRC

**** A brief note about the search and suggest results
These function calls return a sequence of maps with the following structure for one map (may change!)
#+BEGIN_SRC clojure :tangle no
  {:hit ^org.apache.lucene.document.Document Object
   :score 'float
   :doc-id 'number}
#+END_SRC

There's a convenience function to convert the Lucene _Document_ object to a Clojure map.
#+BEGIN_SRC clojure :tangle no
  (require '[msync.lucene.document :as ld])
  (ld/document->map (:hit 'one-response))
  ;; In bulk
  (->> (lucene/search store "query-string" {:field-name "field-name-to-search-in"})
       (map :hit)
       (map ld/document->map))
#+END_SRC


**** Search variations

- Simple search
#+BEGIN_SRC clojure :tangle no :results no
(lucene/search index {:Year "1967"})
#+END_SRC

- OR Search
#+BEGIN_SRC clojure :tangle no :results output code :exports both
(lucene/search index {:Year #{"1964" "1965"}} {:hit->doc #(-> % ld/document->map (select-keys [:Year :Album]))})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit {:Year "1964", :Album "Meet The Beatles!"},
  :score 2.1420584,
  :doc-id 52}
 {:hit {:Year "1964", :Album "Folk Singer"},
  :score 2.1420584,
  :doc-id 281}
 {:hit {:Year "1964", :Album "A Hard Day's Night"},
  :score 2.1420584,
  :doc-id 306}
 {:hit {:Year "1964", :Album "Getz / Gilberto"},
  :score 2.1420584,
  :doc-id 446}
 {:hit {:Year "1965", :Album "Highway 61 Revisited"},
  :score 1.6102078,
  :doc-id 3}
 {:hit {:Year "1965", :Album "Rubber Soul"},
  :score 1.6102078,
  :doc-id 4}
 {:hit {:Year "1965", :Album "Bringing It All Back Home"},
  :score 1.6102078,
  :doc-id 30}
 {:hit {:Year "1965", :Album "A Love Supreme"},
  :score 1.6102078,
  :doc-id 46}
 {:hit {:Year "1965", :Album "Otis Blue: Otis Redding Sings Soul"},
  :score 1.6102078,
  :doc-id 77}
 {:hit {:Year "1965", :Album "Out of Our Heads"},
  :score 1.6102078,
  :doc-id 115}]
#+END_SRC

- AND Search
#+BEGIN_SRC clojure :tangle no :results output code :exports both
(lucene/search index {:Year ["1964" "1965"]})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[]
#+END_SRC

- Phrase search

  Spaces in the query string are inferred to mean a phrase search operation
#+BEGIN_SRC clojure :tangle no :results output code :exports both
  (lucene/search index {:Album "the sun"} {:hit->doc ld/document->map})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit
  {:Number "11",
   :Year "1976",
   :Album "The Sun Sessions",
   :Artist "Elvis Presley",
   :Genre "Rock",
   :Subgenre "Rock & Roll"},
  :score 2.8861985,
  :doc-id 10}
 {:hit
  {:Number "288",
   :Year "1968",
   :Album "Anthem of the Sun",
   :Artist "Grateful Dead",
   :Genre "Rock",
   :Subgenre "Psychedelic Rock"},
  :score 2.544825,
  :doc-id 287}
 {:hit
  {:Number "311",
   :Year "1994",
   :Album "The Sun Records Collection",
   :Artist "Various",
   :Genre "Rock, Funk / Soul, Blues, Pop, Folk, World, & Country",
   :Subgenre "Country Blues, Rock & Roll, Rockabilly"},
  :score 2.544825,
  :doc-id 310}]
#+END_SRC

- Searching across fields

This is an /AND/ operation

#+BEGIN_SRC clojure :tangle no :results output code :exports both
  (lucene/search index {:Album "the sun" :Year "1976"} {:hit->doc ld/document->map})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC clojure
[{:hit
  {:Number "11",
   :Year "1976",
   :Album "The Sun Sessions",
   :Artist "Elvis Presley",
   :Genre "Rock",
   :Subgenre "Rock & Roll"},
  :score 4.56387,
  :doc-id 10}]
#+END_SRC


** Sample Datasets
1. [[https://www.kaggle.com/notgibs/500-greatest-albums-of-all-time-rolling-stone][Albums - Kaggle]] - [[[file:test-resources/albumlist.csv][local]]]
2. Hand-created, real + fictional characters [[file:test-resources/sample-data.csv][here]]

** Additional notes
- Some minimal technical overview of Lucene internals for this project can be found [[file:doc/LuceneNotes.org][here]].

** License
Copyright © 2018-19 Ravindra R. Jaju

Distributed under the Eclipse Public License either version 1.0 or (at your option) any later version.
